name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v4
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: yt-dlp-ng-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: yt-dlp-ng-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            name: yt-dlp-ng-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: yt-dlp-ng-macos-aarch64
    steps:
    - uses: actions/checkout@v4
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
    - name: Package (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        tar -czf ${{ matrix.name }}.tar.gz -C target/${{ matrix.target }}/release yt-dlp-ng
    - name: Package (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Compress-Archive -Path target/${{ matrix.target }}/release/yt-dlp-ng.exe -DestinationPath ${{ matrix.name }}.zip
    - name: Upload Release Asset (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.name }}.tar.gz
        asset_name: ${{ matrix.name }}.tar.gz
        asset_content_type: application/gzip
    - name: Upload Release Asset (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.name }}.zip
        asset_name: ${{ matrix.name }}.zip
        asset_content_type: application/zip

  publish-crate:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  update-homebrew:
    name: Update Homebrew Formula
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    steps:
    - name: Update Homebrew formula
      uses: mislav/bump-homebrew-formula-action@v1
      with:
        formula-name: yt-dlp-ng
        homebrew-tap: buggerman/homebrew-tools
      env:
        COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }}

  update-aur:
    name: Update AUR Package
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    steps:
    - name: Update AUR package
      uses: KSXGitHub/github-actions-deploy-aur@v4.1.1
      with:
        pkgname: yt-dlp-ng
        pkgbuild: ./packaging/arch/PKGBUILD
        commit_username: ${{ secrets.AUR_USERNAME }}
        commit_email: ${{ secrets.AUR_EMAIL }}
        ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
        commit_message: Update to ${{ github.ref }}
        ssh_keyscan_types: rsa,dsa,ecdsa,ed25519